name: Validate Project

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    # env:
    #   RAILS_ENV: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.2
          bundler-cache: true
          cache-version: 1

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '20.3.0'

      - name: Restore cached ./node_modules
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ runner.os }}-yarn-lock-${{ hashFiles('./yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-lock-

      - name: Yarn Install
        run: yarn install
  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v1
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.2
          bundler-cache: true
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '20.3.0'
      - name: Restore cached ./node_modules
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ runner.os }}-yarn-lock-${{ hashFiles('./yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-lock-
      - name: Yarn Install
        run: yarn install

      - name: Prepare Database
        env:
          RAILS_ENV: test
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: bundle exec rails db:prepare

      # - name: Run tests
      #   env:
      #     REDIS_URL: redis://localhost:6379/1
      #     RAILS_ENV: test
      #     RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      #   run: bundle exec rspec --format RspecJunitFormatter --out ./reports/rspec.xml
      # - name: Publish Test Report
      #   uses: mikepenz/action-junit-report@v2
      #   with:
      #     report_paths: './reports/rspec.xml'
      - name: Run Fontend Tests
        run: npm run test
